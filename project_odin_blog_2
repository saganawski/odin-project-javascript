Factory Functions and the Module Pattern

Learning Outcomes

By the end of this lesson, you should be able to do the following:

    Describe common bugs you might run into using constructors.
    Write a factory method that returns an object.
    Explain how scope works in JavaScript (bonus points if you can point out what ES6 changed!).
    Explain what Closure is and how it impacts private functions & variables.
    Describe how private functions & variables are useful.
    Use inheritance in objects using the factory pattern.
    Explain the module pattern.
    Describe IIFE. What does it stand for?
    Briefly explain namespacing and how it’s useful.


Factory function introduction

The factory function pattern is similar to constructors, but instead of using new to create an object, factory functions simply set up and return the new object when you call the function. 

const personFactory = (name, age) => {
  const sayHello = () => console.log('hello!');
  return { name, age, sayHello };
};

const jeff = personFactory('jeff', 27);

console.log(jeff.name); // 'jeff'

jeff.sayHello(); // calls the function and logs 'hello!'

SCOPE
seems kinda self explantory

let a = 17;

const func = x => {
  let a = x;
};

func(99);

console.log(a); // ???????

The answer is 17, and the reason it’s not 99 is that on line 4, the outer variable a is not redefined, rather a new a is created inside the scope of that function. In the end, figuring out scope in most contexts is not all that complicated, but it is crucial to understanding some of the more advanced concepts that are coming up soon, so take your time to understand what’s going on in the following resources.

PRIVATE VARIABLES AND FUNCTIONS

const FactoryFunction = string => {
  const capitalizeString = () => string.toUpperCase();
  const printString = () => console.log(`----${capitalizeString()}----`);
  return { printString };
};

const taco = FactoryFunction('taco');

printString(); // ERROR!!
capitalizeString(); // ERROR!!
taco.capitalizeString(); // ERROR!!
taco.printString(); // this prints "----TACO----"

Because of the concept of scope, neither of the functions created inside of FactoryFunction can be accessed outside of the function itself, which is why lines 9, 10, and 11 fail. The only way to use either of those functions is to return them in the object (see line 4), which is why we can call taco.printString() but not taco.capitalizeString(). The big deal here is that even though we can’t access the capitalizeString() function, printString() can. That is closure.

The concept of closure is the idea that functions retain their scope even if they are passed around and called outside of that scope. In this case, printString has access to everything inside of FactoryFunction, even if it gets called outside of that function.


Inheritance with factories

const Person = (name) => {
  const sayName = () => console.log(`my name is ${name}`)
  return {sayName}
}

const Nerd = (name) => {
  // simply create a person and pull out the sayName function with destructuring assignment syntax!
  const {sayName} = Person(name)
  const doSomethingNerdy = () => console.log('nerd stuff')
  return {sayName, doSomethingNerdy}
}

const jeff = Nerd('jeff')

jeff.sayName() //my name is jeff
jeff.doSomethingNerdy() // nerd stuff

MODULES

const calculator = (() => {
  const add = (a, b) => a + b;
  const sub = (a, b) => a - b;
  const mul = (a, b) => a * b;
  const div = (a, b) => a / b;
  return {
    add,
    sub,
    mul,
    div,
  };
})();

calculator.add(3,5) // 8
calculator.sub(6,2) // 4
calculator.mul(14,5534) // 77476

ES6 new feature

use when you only need one vs factory when you need a lot
Person vs Calculator


Tic tac toe

html, css, vinalla javascript 

I used a lot of modules one factory (players)

the challenge was bigger then then I thought

I used this https://youtu.be/sNO5awLw9h0 tutorial on how to style the html and css.
the javascript I did on my own as I thought that was the the point of the exerices

some of the big learning moments was dom mipulation and i only used jquery before

using some the array features. find, every, map. foreach, adn fill










